# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: Yast API
  description: Connect your services with Yast.com
  version: "1.0.0"
# the domain of the service
host: yast-rest-api.herokuapp.com
schemes:
  - http
# will be prefixed to all paths
produces:
  - application/json
paths:
  # Auth
  /auth:
    post:
      summary: Login
      tags:
        - Auth
      parameters:
        - name: userAndPassword
          in: body
          description: Username and password
          schema:
            $ref: '#/definitions/UserAndPassword'
          required: true
      responses:
        200:
          description: successfull authorization
          schema:
            $ref: AuthData

  # Project resource
  /projects:
    get:
      summary: Projects collection
      description: The projects endpoint returns a list of all your projects
      tags:
        - Project
      responses:
        200:
          description: An array of projects
          schema:
            type: array
            items:
              $ref: Project
        default:
          description: Unexpected error
          schema:
            $ref: Error
    post:
      summary: Create project
      description: Create a new project
      tags:
        - Project
      parameters:
        - name: project
          in: body
          description: Project
          schema:
            $ref: '#/definitions/Project'
          required: true
      responses:
        200:
          description: The new project
          schema:
            $ref: Project
        default:
          description: Unexpected error
          schema:
            $ref: Error
  /projects/{id}:
    put:
      summary: Update Project
      description: Update existing project
      tags:
        - Project
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the project
          required: true
        - name: project
          in: body
          description: Project
          schema:
            $ref: '#/definitions/Project'
          required: true
      responses:
        200:
          description: Updated project
          schema:
            $ref: Project
    delete:
      summary: Delete Project
      description: Delete existing project
      tags:
        - Project
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the project
          required: true
      responses:
        204:
          description: Project deleted successfully

  # Folder resource
  /folders:
    get:
      summary: Folder collection
      description: The folders endpoint returns a list of all your folders
      tags:
        - Folder
      responses:
        200:
          description: An array of folders
          schema:
            type: array
            items:
              $ref: Folder
        default:
          description: Unexpected error
          schema:
            $ref: Error
    post:
      summary: Create folder
      description: Create a new folder
      tags:
        - Folder
      parameters:
        - name: folder
          in: body
          description: Folder
          schema:
            $ref: '#/definitions/Folder'
          required: true
      responses:
        200:
          description: The new folder
          schema:
            $ref: Folder
        default:
          description: Unexpected error
          schema:
            $ref: Error
  /folders/{id}:
    put:
      summary: Update folder
      description: Update existing folder
      tags:
        - Folder
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the folder
          required: true
        - name: folder
          in: body
          description: Folder
          schema:
            $ref: '#/definitions/Folder'
          required: true
      responses:
        200:
          description: Updated folder
          schema:
            $ref: Folder
    delete:
      summary: Delete folder
      description: Delete existing folder
      tags:
        - Folder
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the folder
          required: true
      responses:
        204:
          description: Folder deleted successfully

  # Records
  /records:
    get:
      summary: Search records
      description: Search records
      tags:
        - Records
      parameters:
        - name: type
          in: query
          type: integer
          description: record type
          required: false
        - name: projects
          in: query
          type: string
          description: Commaseparated list of projects to Search
          required: false
        - name: from
          in: query
          type: integer
          description: Start of search period. In unix time
          required: false
        - name: to
          in: query
          type: integer
          description: End of search period. In Unix time
          required: false
      responses:
        200:
          description: An array of records
          schema:
            type: array
            items:
              $ref: Record
        default:
          description: Unexpected error
          schema:
            $ref: Error
    post:
      summary: Add record
      description: Add new record to Yast
      tags:
        - Records
      parameters:
        - name: record
          in: body
          description: Record
          schema:
            $ref: '#/definitions/Record'
          required: true
      responses:
        200:
          description: Successfully created record
          schema:
            $ref: Record
  /records/{id}:
    put:
      summary: Update record
      description: Update existing record
      tags:
        - Records
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the record
          required: true
        - name: record
          in: body
          description: Record
          schema:
            $ref: '#/definitions/Record'
          required: true
      responses:
        200:
          description: Successfully updated record
          schema:
            $ref: Record
    delete:
      summary: Delete record
      description: Delete exising record
      tags:
        - Records
      parameters:
        - name: id
          in: path
          description: Id of record to delete
          required: true
      responses:
        204:
          description: Successfully deleted record

  # Settings
  /settings:
    get:
      summary: Settings collection
      description: Returns an array of settings
      tags:
        - Settings
      responses:
        200:
          description: List of settings
  /settings/{name}:
    put:
      summary: Update setting
      description: Update an existing setting
      tags:
        - Settings
      parameters:
        - name: setting
          in: body
          description: Setting
          schema:
            $ref: '#/definitions/Setting'
          required: true
      responses:
        200:
          description: Updated setting

  # User resource
  /users/me:
    get:
      summary: User Profile
      description: The User Profile endpoint returns information about the Uber user that has authorized with the application.
      tags:
        - User
      responses:
        200:
          description: Profile information for a user
          schema:
            $ref: Profile
  /users/me/update_password:
    post:
      summary: Update update password
      tags:
        - User
      parameters:
        - name: newPassword
          in: body
          schema:
            $ref: '#/definitions/NewPassword'
          required: true
      responses:
        200:
          description: Password updated

  # Record types
  /recordtypes:
    get:
      summary: List record types
      description: Returns a list of available record types
      tags:
        - Records
      responses:
        200:
          description: List of record types

# Model definitions
definitions:
  AuthData:
    properties:
      api_key:
        type: string
        description: API key used to do authorized calls against the API

  Project:
    properties:
      id:
        type: integer
        description: identifier for this project
      name:
        type: string
        description: project name
      primaryColor:
        type: string
        description: color used to easily indentify this project in UI
      description:
        type: string
        description: Description of project.

  Folder:
    properties:
      id:
        type: integer
        description: identifier for this folder
      name:
        type: string
        description: folder name
      primaryColor:
        type: string
        description: color used to easily indentify this folder in UI
      description:
        type: string
        description: Description of folder.

  Record:
    properties:
      id:
        type: integer
      type:
        type: integer
        description: Type of record. See record types.
      project:
        type: integer
        description: Id of the project this record belongs to

  Setting:
    properties:
      name:
        type: string
        description: Name of setting
      value:
        type: string
        description: Setting value

  Profile:
    properties:
      name:
        type: string
        description: name of the user

  UserAndPassword:
    properties:
      username:
        type: string
        description: username / email on Yast.com
      password:
        type: string
        description: Your password at Yast.com

  NewPassword:
    properties:
      newPassword:
        type: string
        description: Your new password

  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
